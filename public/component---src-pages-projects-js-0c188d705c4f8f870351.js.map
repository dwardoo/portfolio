{"version":3,"sources":["webpack:///./node_modules/tiny-skeleton-loader-react/dist/index.es.js","webpack:///./src/components/sections/articles.js","webpack:///./src/pages/projects.js"],"names":["css","ref","insertAt","document","head","getElementsByTagName","style","createElement","type","firstChild","insertBefore","appendChild","styleSheet","cssText","createTextNode","styleInject","motion","custom","styled","section","theme","colors","background","ContentWrapper","breakpoints","lg","scrollBar","boxShadow","borderRadius","card","boxShadowHover","Underlining","secondary","primary","subtext","ProjectsPage","data","frontmatter","index","edges","node","seoTitle","useSeoTitleSuffix","useSplashScreen","console","log","hero","globalState","isIntroDone","darkMode","initialState","title","seoTitleSuffix","content","projects","showViewMore"],"mappings":"2NAgCA,SAAqBA,EAAKC,QACZ,IAARA,IAAgBA,EAAM,IAC1B,IAAIC,EAAWD,EAAIC,SAEnB,GAAKF,GAA2B,oBAAbG,SAAnB,CAIA,IAAIC,EAAOD,SAASC,MAAQD,SAASE,qBAAqB,QAAQ,GAC9DC,EAAQH,SAASI,cAAc,SACnCD,EAAME,KAAO,WAEI,QAAbN,GACEE,EAAKK,WACPL,EAAKM,aAAaJ,EAAOF,EAAKK,YAKhCL,EAAKO,YAAYL,GAGfA,EAAMM,WACRN,EAAMM,WAAWC,QAAUb,EAE3BM,EAAMK,YAAYR,SAASW,eAAed,KAS9Ce,CALe,4mB,yFChDOC,IAAOC,OAAOC,UAAOC,QAArB,8EAAcD,CAAd,4CAGN,qBAAGE,MAAkBC,OAAOC,eAGfJ,kBAAOK,KAAV,qFAAGL,CAAH,2yCAMD,qBAAGE,MAAkBI,YAAYC,MAO/B,qBAAGL,MAAkBI,YAAYC,MAgBjC,qBAAGL,MAAkBI,YAAYC,MAKjC,qBAAGL,MAAkBC,OAAOK,aAYtB,qBAAGN,MAAkBC,OAAOC,cAC/B,qBAAGF,MAAkBC,OAAOK,aAI5B,qBAAGN,MAAkBC,OAAOC,cAa3B,qBAAGF,MAAkBC,OAAOM,aACpC,qBAAGP,MAAkBQ,gBACxB,qBAAGR,MAAkBC,OAAOQ,QAGf,qBAAGT,MAAkBC,OAAOS,iBAE7CC,KACsB,qBAAGX,MAAkBC,OAAOW,aAEvC,qBAAGZ,MAAkBI,YAAYC,MAI3C,qBAAGL,MAAkBC,OAAOY,WAW5B,qBAAGb,MAAkBC,OAAOa,W,yCCzC9BC,UApDM,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACdC,EAAgBD,EAAKE,MAAMC,MAAM,GAAGC,KAApCH,YACAI,EAAiDJ,EAAjDI,SAAUC,EAAuCL,EAAvCK,kBAAmBC,EAAoBN,EAApBM,gBACrCC,QAAQC,IAAI,SACZD,QAAQC,IAAIR,GACZO,QAAQC,IAAIT,EAAKU,KAAKP,OACtB,IAAMQ,EAAc,CAElBC,aAAaL,EAGbM,UAAU,GAGZ,OACE,kBAAC,IAAD,CAAqBC,aAAcH,GACjC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEI,MACET,EACOD,EADU,MACIW,iBADJ,GAEVX,IAGX,kBAAC,IAAD,CACEY,QAaIjB,EACCU,KAAKP,QAGZ,kBAAC,IAAD,CAAUc,QAASjB,EAAKkB,SAASf,MAAOgB,cAAc","file":"component---src-pages-projects-js-0c188d705c4f8f870351.js","sourcesContent":["import React from 'react';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nvar _assign = function __assign() {\n  _assign = Object.assign || function __assign(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return _assign.apply(this, arguments);\n};\n\nfunction styleInject(css, ref) {\n  if (ref === void 0) ref = {};\n  var insertAt = ref.insertAt;\n\n  if (!css || typeof document === 'undefined') {\n    return;\n  }\n\n  var head = document.head || document.getElementsByTagName('head')[0];\n  var style = document.createElement('style');\n  style.type = 'text/css';\n\n  if (insertAt === 'top') {\n    if (head.firstChild) {\n      head.insertBefore(style, head.firstChild);\n    } else {\n      head.appendChild(style);\n    }\n  } else {\n    head.appendChild(style);\n  }\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar css_248z = \".styles_skeleton__tyzRD {\\n  line-height: 1;\\n  display: inline-block;\\n  overflow: hidden;\\n  position: relative;\\n  background: #eff1f6;\\n}\\n\\n.styles_skeleton__tyzRD::before {\\n  content: \\\"\\\";\\n  position: absolute;\\n  height: 100%;\\n  width: 500px;\\n  top: 0;\\n  left: -500px;\\n  background-image: linear-gradient(\\n    90deg,\\n    rgba(255, 255, 255, 0),\\n    rgba(255, 255, 255, 0.6),\\n    rgba(255, 255, 255, 0)\\n  );\\n  animation: styles_skeleton-progress__aezri 1.2s ease-in-out infinite;\\n}\\n\\n@keyframes styles_skeleton-progress__aezri {\\n  0% {\\n    left: -500px;\\n  }\\n  100% {\\n    left: 100%;\\n  }\\n}\\n\";\nvar css = {\n  \"skeleton\": \"styles_skeleton__tyzRD\",\n  \"skeleton-progress\": \"styles_skeleton-progress__aezri\"\n};\nstyleInject(css_248z);\n\nfunction SkeletonLoader(_a) {\n  var _b = _a.width,\n      width = _b === void 0 ? \"100%\" : _b,\n      _c = _a.height,\n      height = _c === void 0 ? \"1em\" : _c,\n      _d = _a.background,\n      background = _d === void 0 ? \"#E9ECEF\" : _d,\n      _e = _a.radius,\n      radius = _e === void 0 ? \"4px\" : _e,\n      _f = _a.circle,\n      circle = _f === void 0 ? false : _f,\n      _g = _a.block,\n      block = _g === void 0 ? true : _g,\n      _h = _a.style,\n      style = _h === void 0 ? {} : _h;\n  return React.createElement(\"div\", {\n    className: css.skeleton,\n    style: _assign({\n      width: width,\n      height: height,\n      background: background,\n      borderRadius: circle ? \"50%\" : radius,\n      display: block ? \"block\" : \"inline-block\"\n    }, style)\n  }, \"\\u200C\");\n}\n\nexport { SkeletonLoader as default };","import React, { useState, useEffect, useContext } from \"react\"\nimport styled from \"styled-components\"\nimport SkeletonLoader from \"tiny-skeleton-loader-react\"\nimport { motion, useAnimation } from \"framer-motion\"\n\nimport Context from \"../../context\"\nimport ContentWrapper from \"../../styles/contentWrapper\"\nimport Underlining from \"../../styles/underlining\"\nimport { parseDate } from \"../../utils\"\nimport { mediumRssFeed, shownArticles } from \"../../../config\"\n// import { rssFeed, shownArticles } from \"../../../config\"\nimport { lightTheme, darkTheme } from \"../../styles/theme\"\n\nconst StyledSection = motion.custom(styled.section`\n  width: 100%;\n  height: auto;\n  background: ${({ theme }) => theme.colors.background};\n`)\n\nconst StyledContentWrapper = styled(ContentWrapper)`\n  && {\n    width: 100%;\n    height: 100%;\n    padding-right: 0;\n    padding-left: 0;\n    @media (min-width: ${({ theme }) => theme.breakpoints.lg}) {\n      padding-right: 2.5rem;\n      padding-left: 2.5rem;\n    }\n    .section-title {\n      padding-right: 2.5rem;\n      padding-left: 2.5rem;\n      @media (min-width: ${({ theme }) => theme.breakpoints.lg}) {\n        padding-right: 0;\n        padding-left: 0;\n      }\n    }\n    .articles {\n      display: flex;\n      justify-content: flex-start;\n      overflow-x: scroll;\n      overflow-y: hidden;\n      -webkit-overflow-scrolling: touch;\n      margin: -2rem 0 0 0;\n      padding: 0 2rem;\n      &::-webkit-scrollbar {\n        display: none;\n      }\n      @media (min-width: ${({ theme }) => theme.breakpoints.lg}) {\n        padding: 0 1rem;\n      }\n      /* Show scrollbar if desktop and wrapper width > viewport width */\n      @media (hover: hover) {\n        scrollbar-color: ${({ theme }) => theme.colors.scrollBar} transparent; // Firefox only\n        &::-webkit-scrollbar {\n          display: block;\n          -webkit-appearance: none;\n        }\n\n        &::-webkit-scrollbar:horizontal {\n          height: 0.8rem;\n        }\n\n        &::-webkit-scrollbar-thumb {\n          border-radius: 8px;\n          border: 0.2rem solid ${({ theme }) => theme.colors.background};\n          background-color: ${({ theme }) => theme.colors.scrollBar};\n        }\n\n        &::-webkit-scrollbar-track {\n          background-color: ${({ theme }) => theme.colors.background};\n          border-radius: 8px;\n        }\n      }\n    }\n    .card {\n      width: 16.25rem;\n      height: 12rem;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      padding: 1rem;\n      margin: 2rem 1rem;\n      box-shadow: 0 5px 15px ${({ theme }) => theme.colors.boxShadow};\n      border-radius: ${({ theme }) => theme.borderRadius};\n      background: ${({ theme }) => theme.colors.card};\n      transition: box-shadow 0.3s ease-out;\n      &:hover {\n        box-shadow: 0 5px 15px ${({ theme }) => theme.colors.boxShadowHover};\n      }\n      &:hover ${Underlining} {\n        box-shadow: inset 0 -1rem 0 ${({ theme }) => theme.colors.secondary};\n      }\n      @media (min-width: ${({ theme }) => theme.breakpoints.lg}) {\n        margin: 2rem 2.5rem 2rem 0;\n      }\n      .category {\n        color: ${({ theme }) => theme.colors.primary};\n        text-transform: uppercase;\n        letter-spacing: +1px;\n        font-weight: 700;\n      }\n      .title {\n        margin-top: 0.25rem;\n        margin-bottom: 0.25rem;\n      }\n      .date {\n        font-size: 0.75rem;\n        color: ${({ theme }) => theme.colors.subtext};\n        letter-spacing: +0.5px;\n      }\n    }\n  }\n`\n\nconst Articles = () => {\n  const MAX_ARTICLES = shownArticles\n\n  const { isIntroDone, darkMode } = useContext(Context).state\n  const [articles, setArticles] = useState()\n  const articlesControls = useAnimation()\n\n  // Load and display articles after the splashScreen sequence is done\n  useEffect(() => {\n    const loadArticles = async () => {\n      if (isIntroDone) {\n        await articlesControls.start({\n          opacity: 1,\n          y: 0,\n          transition: { delay: 1 },\n        })\n        fetch(mediumRssFeed, { headers: { Accept: \"application/json\" } })\n          // fetch(rssFeed, { headers: { Accept: \"application/json\" } })\n          .then(res => res.json())\n          // Feed also contains comments, therefore we filter for articles only\n          .then(data => data.items.filter(item => item.categories.length > 0))\n          // .then(data => data.items.filter(item => item.title.length > 0))\n          .then(newArticles => newArticles.slice(0, MAX_ARTICLES))\n          .then(articles => setArticles(articles))\n          .catch(error => console.log(error))\n      }\n    }\n    loadArticles()\n  }, [isIntroDone, articlesControls, MAX_ARTICLES])\n\n  return (\n    <StyledSection\n      id=\"articles\"\n      initial={{ opacity: 0, y: 20 }}\n      animate={articlesControls}\n    >\n      <StyledContentWrapper>\n        <h3 className=\"section-title\">Latest Articles</h3>\n        <div className=\"articles\">\n          {articles\n            ? articles.map(item => (\n                <a\n                  href={item.link}\n                  target=\"_blank\"\n                  rel=\"nofollow noopener noreferrer\"\n                  title={item.title}\n                  aria-label={item.link}\n                  key={item.link}\n                >\n                  <div className=\"card\">\n                    <span className=\"category\">\n                      <Underlining color=\"tertiary\" hoverColor=\"secondary\">\n                        {item.categories[2]}\n                      </Underlining>\n                    </span>\n                    <h4 className=\"title\">{item.title}</h4>\n                    <span className=\"date\">{parseDate(item.pubDate)}</span>\n                  </div>\n                </a>\n              ))\n            : [...Array(MAX_ARTICLES <= 3 ? MAX_ARTICLES : 3)].map((i, key) => (\n                <div className=\"card\" key={key}>\n                  <SkeletonLoader\n                    height=\"1.5rem\"\n                    style={{ marginBottom: \".5rem\" }}\n                    background={\n                      darkMode\n                        ? darkTheme.colors.tertiary\n                        : lightTheme.colors.tertiary\n                    }\n                  />\n                  <SkeletonLoader\n                    height=\"4rem\"\n                    background={\n                      darkMode\n                        ? darkTheme.colors.tertiary\n                        : lightTheme.colors.tertiary\n                    }\n                  />\n                  <SkeletonLoader\n                    height=\".75rem\"\n                    width=\"50%\"\n                    style={{ marginTop: \".5rem\" }}\n                    background={\n                      darkMode\n                        ? darkTheme.colors.tertiary\n                        : lightTheme.colors.tertiary\n                    }\n                  />\n                </div>\n              ))}\n        </div>\n      </StyledContentWrapper>\n    </StyledSection>\n  )\n}\n\nexport default Articles\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { graphql } from \"gatsby\";\n\nimport GlobalStateProvider from \"../context/provider\";\nimport Layout from \"../components/layout\";\nimport SEO from \"../components/seo\";\nimport Hero from \"../components/sections/hero\";\nimport Articles from \"../components/sections/articles\";\nimport About from \"../components/sections/about\";\nimport Interests from \"../components/sections/interests\";\nimport Projects from \"../components/sections/projects\";\nimport Contact from \"../components/sections/contact\";\nimport { seoTitleSuffix } from \"../../config\";\n\nconst ProjectsPage = ({ data }) => {\n  const { frontmatter } = data.index.edges[0].node;\n  const { seoTitle, useSeoTitleSuffix, useSplashScreen } = frontmatter;\n  console.log(\"hello\");\n  console.log(frontmatter);\n  console.log(data.hero.edges);\n  const globalState = {\n    // if useSplashScreen=false, we skip the intro by setting isIntroDone=true\n    isIntroDone: useSplashScreen ? false : true,\n    // darkMode is initially disabled, a hook inside the Layout component\n    // will check the user's preferences and switch to dark mode if needed\n    darkMode: false,\n  };\n\n  return (\n    <GlobalStateProvider initialState={globalState}>\n      <Layout>\n        <SEO\n          title={\n            useSeoTitleSuffix\n              ? `${seoTitle} - ${seoTitleSuffix}`\n              : `${seoTitle}`\n          }\n        />\n        <Hero\n          content={\n            /*[\n            {\n              node: {\n                frontmatter: {\n                  greetings: \"\",\n                  title: \"Portfolio\",\n                  subtitle: \"\",\n                  subtitlePrefix: \"Past work that I'm proud of.\",\n                },\n                body: \"\",\n              },\n            },\n          ]*/ data\n              .hero.edges\n          }\n        />\n        <Projects content={data.projects.edges} showViewMore={false} />\n      </Layout>\n    </GlobalStateProvider>\n  );\n};\n\nProjectsPage.propTypes = {\n  data: PropTypes.object.isRequired,\n};\n\nexport default ProjectsPage;\n\nexport const pageQuery = graphql`\n  {\n    index: allMdx(filter: { fileAbsolutePath: { regex: \"/index/index/\" } }) {\n      edges {\n        node {\n          frontmatter {\n            seoTitle\n            useSeoTitleSuffix\n            useSplashScreen\n          }\n        }\n      }\n    }\n    hero: allMdx(\n      filter: {\n        fileAbsolutePath: { regex: \"/index/projects/\" }\n        frontmatter: { isHero: { eq: true } }\n      }\n    ) {\n      edges {\n        node {\n          body\n          id\n          frontmatter {\n            greetings\n            greetingicon {\n              childImageSharp {\n                fluid(maxWidth: 80, quality: 90) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            title\n            subtitlePrefix\n            subtitle\n          }\n        }\n      }\n    }\n\n    projects: allMdx(\n      filter: {\n        fileAbsolutePath: { regex: \"/index/projects/\" }\n        frontmatter: { visible: { eq: true } }\n      }\n      sort: { fields: [frontmatter___position], order: ASC }\n    ) {\n      edges {\n        node {\n          body\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            category\n            emoji\n            external\n            video\n            github\n            presentation\n            events\n            news\n            publication\n            appStore\n            screenshot {\n              childImageSharp {\n                fluid(maxWidth: 1800, quality: 100) {\n                  ...GatsbyImageSharpFluid\n                }\n              }\n            }\n            tags\n            position\n            buttonVisible\n            buttonUrl\n            buttonText\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}